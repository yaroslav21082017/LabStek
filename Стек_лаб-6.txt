interface Downloader {
    method download(url: string): string
}

class SimpleDownloader implements Downloader {
    method download(url: string): string {
    }
}

interface CachedDownloader extends Downloader {
    method download(url: string): string
    method isCached(url: string): bool
    method getCachedData(url: string): string
    method cacheData(url: string, data: string): void
}

class CachedDownloaderProxy implements CachedDownloader {
    private downloader: Downloader
    private cache: Map<string, string>

    constructor(downloader: Downloader) {
        this.downloader = downloader
        this.cache = new Map()
    }

    method download(url: string): string {
        if (this.isCached(url)) {
            return this.getCachedData(url)
        } else {
            const data = this.downloader.download(url)
            this.cacheData(url, data)
            return data
        }
    }

    method isCached(url: string): bool {
        return this.cache.has(url)
    }

    method getCachedData(url: string): string {
        return this.cache.get(url)
    }

    method cacheData(url: string, data: string): void {
        this.cache.set(url, data)
    }
}

function main() {
    const realDownloader = new SimpleDownloader()
    const downloaderWithCache = new CachedDownloaderProxy(realDownloader)

    const url1 = "https://...file1.txt"
    const url2 = "https://.../file2.txt"

    const data1 = downloaderWithCache.download(url1)
    const data2 = downloaderWithCache.download(url2)

    const cachedData1 = downloaderWithCache.download(url1)
    const cachedData2 = downloaderWithCache.download(url2)
}
 Створений CachedDownloader який розширює Downloader.
Додає методи для кешування та перевірки наявності даних в кеші.
Реалізація замісника CachedDownloaderProxy використовує кеш для оптимізації завантаження файлів.