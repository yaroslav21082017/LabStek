class Singleton:
    _instance = None 

    def __new__(cls):
     
        if cls._instance is None:
            cls._instance = super(Singleton, cls).__new__(cls)
            cls._instance.init_data()  
        return cls._instance

    def init_data(self):
        
        self.storage = {}  
    def add_data(self, key, value):
      
        self.storage[key] = value

    def get_data(self, key):
        
        return self.storage.get(key, None)


singleton_instance_1 = Singleton()
singleton_instance_1.add_data('file1.txt', 'Contents of file 1')
print(singleton_instance_1.get_data('file1.txt'))  

singleton_instance_2 = Singleton()  
print(singleton_instance_1 is singleton_instance_2) 

singleton_instance_2.add_data('file2.txt', 'Contents of file 2')
print(singleton_instance_1.get_data('file2.txt'))  

1. Клас Singleton містить змінну _instance, яка використовується для збереження єдиного екземпляра класу.

2. Метод __new__ визначає створення нового екземпляра класу. При створенні нового екземпляра перевіряється, 
чи _instance є пустим (не існує жодного екземпляра), і якщо так, то створюється новий екземпляр за допомогою 
super(Singleton, cls).__new__(cls) і ініціалізується за допомогою методу init_data. Після чого повертається існуючий екземпляр.

3. Метод init_data використовується для ініціалізації данних для єдиного екземпляра. У цьому прикладі встановлюється
 порожнє сховище self.storage, яке може бути використане для збереження даних.

4. Методи add_data і get_data використовуються для додавання і отримання даних з сховища self.storage.